class Nyuryoku{constructor(){this.isMouseDown=!1;this.isTouchActive=!1;this.mouseX=0;this.mouseY=0;this.prevMouseX=0;this.prevMouseY=0;this.dragX=0;this.dragY=0;this.dragX2=0;this.dragY2=0;this.pressMoveX=0;this.pressMoveY=0;this.pressStartX=0;this.pressStartY=0;this.moveTimerId=null;this.moveStopDelay=50;this.isMoving=!1;this.preventTouchSelection();this.setupEventListeners()};preventTouchSelection(){const style=document.createElement('style');style.innerHTML=`;            body, canvas {;                -webkit-touch-callout: none; /* iOS Safari */;                -webkit-user-select: none;   /* Safari */;                -khtml-user-select: none;    /* Konqueror HTML */;                -moz-user-select: none;      /* Firefox */;                -ms-user-select: none;       /* Internet Explorer/Edge */;                user-select: none;           /* Non-prefixed version */;                -webkit-tap-highlight-color: rgba(0,0,0,0); /* iOS Safariでタップ時のハイライトを消す */;                touch-action: none;          /* タッチアクションを無効化 */;            };        `;document.head.appendChild(style);document.addEventListener('contextmenu',function(e){e.preventDefault();return!1},{passive:!1});canvas.style.touchAction='none';canvaspaper.style.touchAction='none'};setupEventListeners(){window.addEventListener('mousedown',this.handleMouseDown.bind(this),{passive:!1});window.addEventListener('mousemove',this.handleMouseMove.bind(this),{passive:!1});window.addEventListener('mouseup',this.handleMouseUp.bind(this),{passive:!1});window.addEventListener('touchstart',this.handleTouchStart.bind(this),{passive:!1});window.addEventListener('touchmove',this.handleTouchMove.bind(this),{passive:!1});window.addEventListener('touchend',this.handleTouchEnd.bind(this),{passive:!1});window.addEventListener('touchcancel',this.handleTouchEnd.bind(this),{passive:!1});let lastTouchEnd=0;document.addEventListener('touchend',function(e){const now=Date.now();if(now-lastTouchEnd<300){e.preventDefault()};lastTouchEnd=now},{passive:!1})};updateMovingState(){this.isMoving=!0;if(this.moveTimerId!==null){clearTimeout(this.moveTimerId)};this.moveTimerId=setTimeout(()=>{this.isMoving=!1;this.moveTimerId=null},this.moveStopDelay)};handleMouseDown(e){e.preventDefault();const rect=canvas.getBoundingClientRect();const x=e.clientX;const y=e.clientY;const isInsideCanvas=(x>=rect.left&&x<=rect.right&&y>=rect.top&&y<=rect.bottom);if(!isInsideCanvas){return};this.isMouseDown=!0;this.mouseX=e.clientX-rect.left;this.mouseY=e.clientY-rect.top;this.prevMouseX=this.mouseX;this.prevMouseY=this.mouseY;this.dragX=0;this.dragY=0;this.pressStartX=this.mouseX;this.pressStartY=this.mouseY;this.pressMoveX=0;this.pressMoveY=0;this.updateMovingState();if(motionpen){const inputData={isPressed:this.isPressed(),position:this.getPosition(),drag:this.getDrag(),drag2:this.getDrag2(),pressMove:this.getPressMove(),isMoving:this.isMoving};motionpen.f_test(inputData)}};handleMouseMove(e){if(!this.isMouseDown)return;e.preventDefault();const rect=canvas.getBoundingClientRect();this.prevMouseX=this.mouseX;this.prevMouseY=this.mouseY;this.mouseX=e.clientX-rect.left;this.mouseY=e.clientY-rect.top;this.dragX=this.mouseX-this.prevMouseX;this.dragY=this.mouseY-this.prevMouseY;this.pressMoveX=this.mouseX-this.pressStartX;this.pressMoveY=this.mouseY-this.pressStartY;if(this.dragX!==0||this.dragY!==0){this.dragX2=this.dragX;this.dragY2=this.dragY;this.updateMovingState()};if(motionpen){const inputData={isPressed:this.isPressed(),position:this.getPosition(),drag:this.getDrag(),drag2:this.getDrag2(),pressMove:this.getPressMove(),isMoving:this.isMoving};motionpen.f_test(inputData)}};handleMouseUp(e){if(!this.isMouseDown)return;e.preventDefault();this.isMouseDown=!1;this.dragX=0;this.dragY=0;const finalPressMoveX=this.pressMoveX;const finalPressMoveY=this.pressMoveY;this.pressMoveX=0;this.pressMoveY=0;if(motionpen){const inputData={isPressed:this.isPressed(),position:this.getPosition(),drag:this.getDrag(),drag2:this.getDrag2(),pressMove:{x:finalPressMoveX,y:finalPressMoveY},finalPressMove:{x:finalPressMoveX,y:finalPressMoveY},isMoving:this.isMoving};motionpen.f_test(inputData)}};handleTouchStart(e){e.preventDefault();if(e.touches.length>0){const rect=canvas.getBoundingClientRect();const touch=e.touches[0];const x=touch.clientX;const y=touch.clientY;const isInsideCanvas=(x>=rect.left&&x<=rect.right&&y>=rect.top&&y<=rect.bottom);if(!isInsideCanvas){return};this.isTouchActive=!0;this.mouseX=touch.clientX-rect.left;this.mouseY=touch.clientY-rect.top;this.prevMouseX=this.mouseX;this.prevMouseY=this.mouseY;this.dragX=0;this.dragY=0;this.pressStartX=this.mouseX;this.pressStartY=this.mouseY;this.pressMoveX=0;this.pressMoveY=0;this.updateMovingState();if(motionpen){const inputData={isPressed:this.isPressed(),position:this.getPosition(),drag:this.getDrag(),drag2:this.getDrag2(),pressMove:this.getPressMove(),isMoving:this.isMoving};motionpen.f_test(inputData)}}};handleTouchMove(e){if(!this.isTouchActive)return;e.preventDefault();if(e.touches.length>0){const rect=canvas.getBoundingClientRect();const touch=e.touches[0];this.prevMouseX=this.mouseX;this.prevMouseY=this.mouseY;this.mouseX=touch.clientX-rect.left;this.mouseY=touch.clientY-rect.top;this.dragX=this.mouseX-this.prevMouseX;this.dragY=this.mouseY-this.prevMouseY;this.pressMoveX=this.mouseX-this.pressStartX;this.pressMoveY=this.mouseY-this.pressStartY;if(this.dragX!==0||this.dragY!==0){this.dragX2=this.dragX;this.dragY2=this.dragY;this.updateMovingState()};if(motionpen){const inputData={isPressed:this.isPressed(),position:this.getPosition(),drag:this.getDrag(),drag2:this.getDrag2(),pressMove:this.getPressMove(),isMoving:this.isMoving};motionpen.f_test(inputData)}}};handleTouchEnd(e){if(!this.isTouchActive)return;e.preventDefault();this.isTouchActive=!1;this.dragX=0;this.dragY=0;const finalPressMoveX=this.pressMoveX;const finalPressMoveY=this.pressMoveY;this.pressMoveX=0;this.pressMoveY=0;if(motionpen){const inputData={isPressed:this.isPressed(),position:this.getPosition(),drag:this.getDrag(),drag2:this.getDrag2(),pressMove:{x:finalPressMoveX,y:finalPressMoveY},finalPressMove:{x:finalPressMoveX,y:finalPressMoveY},isMoving:this.isMoving};motionpen.f_test(inputData)}};getPosition(){return{x:this.mouseX,y:this.mouseY}};getDrag(){return{x:this.dragX,y:this.dragY}};getDrag2(){return{x:this.dragX2,y:this.dragY2}};getPressMove(){return{x:this.pressMoveX,y:this.pressMoveY}};isPressed(){return this.isMouseDown||this.isTouchActive};f_test(){return{isPressed:this.isPressed(),position:this.getPosition(),drag:this.getDrag(),drag2:this.getDrag2(),pressMove:this.getPressMove(),isMoving:this.isMoving}}}