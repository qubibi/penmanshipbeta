class PaperDraw{constructor(){this.isDrawing=!1;this.lastX=0;this.lastY=0;this.mx=0;this.my=0;this.scrollOffset=0;this.lastScrollOffset=0;this.setupMouseEvents();this.offset=1.13;this.dotQueue=[]};freset(){this.isDrawing=!1;this.lastX=0;this.lastY=0;this.mx=0;this.my=0;this.scrollOffset=0;this.lastScrollOffset=0;this.dotQueue=[];rend_linepaper.clear()};setupMouseEvents(){};startDrawing(){this.isDrawing=!0;[this.lastX,this.lastY]=this.f_automouse_pos();this.lastScrollOffset=this.scrollOffset};fef(){if(this.isDrawing){const[x,y]=this.f_automouse_pos();let _dragxmag=qb.mppng(Math.abs(motionpen.xsabn),0,3,1,-1,!0,0.0);const scrollDelta=Math.max(Math.min(this.scrollOffset-this.lastScrollOffset,5),-5);const adjustedLastY=this.lastY+scrollDelta*_dragxmag;rend_linepaper.beginShape();rend_linepaper.setColor(0,0,0,1);rend_linepaper.vertex(this.lastX,adjustedLastY-2.11);rend_linepaper.vertex(x,y-2.11);rend_linepaper.endShape();rend_linepaper.beginShape();rend_linepaper.vertex(this.lastX+this.offset,adjustedLastY-this.offset-2.11);rend_linepaper.vertex(x+this.offset,y-this.offset-2.11);rend_linepaper.endShape();rend_linepaper.beginShape();rend_linepaper.vertex(this.lastX-this.offset,adjustedLastY-this.offset-2.11);rend_linepaper.vertex(x-this.offset,y-this.offset-2.11);rend_linepaper.endShape();rend_linepaper.beginShape();rend_linepaper.vertex(this.lastX,adjustedLastY-this.offset*2-2.11);rend_linepaper.vertex(x+this.offset/2,y-this.offset*2-2.11);rend_linepaper.endShape();this.lastX=x;this.lastY=y;this.lastScrollOffset=this.scrollOffset};this.processDotQueue()};drawRandomDots(){if(this.drawRandomDots.callCount===undefined){this.drawRandomDots.callCount=0};if(this.drawRandomDots.callCount===0||Math.random()<0.8){const[currentX,currentY]=this.f_automouse_pos();const currentScrollOffset=this.scrollOffset;this.dotQueue.push({x:currentX,y:currentY,scrollOffset:currentScrollOffset,frameCount:0,targetFrame:77})};this.drawRandomDots.callCount++};processDotQueue(){if(this.dotQueue.length===0)return;for(let i=this.dotQueue.length-1;i>=0;i--){const dot=this.dotQueue[i];dot.frameCount++;if(dot.frameCount>=dot.targetFrame){const scrollDelta=this.scrollOffset-dot.scrollOffset;const dotX=dot.x-qb.rndmint(11+(forMobile_magNega*-2),26+(forMobile_magNega*-7));const dotY=dot.y-120+(forMobile_magNega*120)-scrollDelta;const dotSize=Math.random()*0.5+1.7;const offsetX=1.9;const offsetY=-0.8;this.drawMultipleDiamonds(dotX,dotY,dotSize,offsetX,offsetY);this.dotQueue.splice(i,1)}}};drawMultipleDiamonds(x,y,size,offsetX,offsetY){let positions=[{x,y},{x:x+offsetX,y:y+offsetY},{x:x+offsetX*2,y:y+offsetY}];if(Math.random()<0.2){positions=[{x,y}]};for(const pos of positions){this.drawDiamond(pos.x,pos.y,size)}};drawDiamond(x,y,size){rend_linepaper.beginShape();rend_linepaper.setColor(0,0,0,1);const segments=4;for(let i=0;i<segments;i++){const angle1=(i/segments)*Math.PI*2;const angle2=((i+1)/segments)*Math.PI*2;rend_linepaper.vertex(x+Math.cos(angle1)*size,y+Math.sin(angle1)*size);rend_linepaper.vertex(x+Math.cos(angle2)*size,y+Math.sin(angle2)*size+Math.random());rend_linepaper.endShape();if(i<segments-1){rend_linepaper.beginShape();rend_linepaper.setColor(0,0,0,1)}}};stopDrawing(){this.isDrawing=!1};f_automouse(xx,yy){this.mx=xx;this.my=yy};f_automouse_pos(){return[this.mx,this.my]};getMousePos(){const rect=canvaspaper.getBoundingClientRect();const scaleX=canvaspaper.width/rect.width;const scaleY=canvaspaper.height/rect.height;const centerX=canvaspaper.width/2;const centerY=canvaspaper.height/2;return[((this.mx-rect.left)*scaleX/rend_linepaper.pixelDensity)-centerX,((this.my-rect.top)*scaleY/rend_linepaper.pixelDensity)-centerY]};updateScrollOffset(newOffset){this.scrollOffset=newOffset}}